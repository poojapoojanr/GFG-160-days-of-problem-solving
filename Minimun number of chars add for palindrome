method 1:
# def isPalindrome(s, i ,j):
#     while i < j:
#         if s[i] != s[j]:
#             return False
#         i+=1
#         j-=1
#     return True
# class Solution:
#     def minChar(self, s):
#         #Write your code here
#         cnt = 0
#         i = len(s)-1
#         while i>=0 and not isPalindrome(s,0,i):
#             i -=1
#             cnt+=1
#         return cnt



method 2:
def LPS(s):
    n = len(s)
    lps = [0]*n
    j=0
    i=1
    while i < n:
        if s[i]==s[j]:
            j+=1
            lps[i]=j
            i+=1
        else:
            if j != 0:
                j=lps[j-1]
            else:
                lps[i]=0
                i+=1
    return lps
class Solution:
    def minChar(self, s):
        n = len(s)
        rev = s[::-1]
        s = s + "$" + rev
        lps = LPS(s)
        return n - lps[-1]
#{ 
 # Driver Code Starts
#Initial Template for Python 3

if __name__ == "__main__":
    for _ in range(int(input())):
        s = input()
        obj = Solution()
        ans = obj.minChar(s)
        print(ans)
        print("~")

# } Driver Code Ends
